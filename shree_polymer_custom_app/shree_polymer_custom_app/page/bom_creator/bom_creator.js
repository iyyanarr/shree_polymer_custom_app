$(document).ready(function () {
    // Custom handler for server-rendered collapse buttons
    $(document).on('click', '.btn-collapse:not([data-parent-row])', function () {
        console.log("Server-side collapse clicked");

        let btn = $(this);
        let bomSection = btn.closest('tr').nextUntil('.bom-header, tr:has(td.total-row)').addBack();

        // Find the next total row if it exists
        let nextTotal = bomSection.last().next('tr:has(td.total-row)');
        if (nextTotal.length) {
            bomSection = bomSection.add(nextTotal);
        }

        // Remove the BOM section
        bomSection.remove();
    });
});

// Custom handler for the server-side rendered collapse buttons
frappe.pages['bom_creator'].on_page_show = function () {
    // Apply this fix after the page loads
    setTimeout(function () {
        // Convert standard Collapse buttons to work with our structure
        $('.btn-collapse').each(function () {
            let btn = $(this);
            let row = btn.closest('tr');

            // If this is a BOM header row generated by the server (not dynamically created)
            if (row.hasClass('bom-header') && !row.attr('data-parent-expansion')) {
                // Generate a unique ID for this BOM section
                let bom_id = `bom-section-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
                row.attr('data-bom-id', bom_id);

                // Find all rows until the next header or end of section
                let next_row = row.next();
                while (next_row.length && !next_row.hasClass('bom-header')) {
                    next_row.attr('data-parent-bom', bom_id);
                    let temp = next_row;
                    next_row = next_row.next();

                    // If we've reached a total row, mark it and stop
                    if (temp.hasClass('total-row')) {
                        temp.attr('data-parent-bom', bom_id);
                        break;
                    }
                }

                // Convert the button to our custom handler
                btn.removeClass('btn-collapse').addClass('btn-collapse-custom');
            }
        });
    }, 500);
};

frappe.pages['bom_creator'].on_page_load = function (wrapper) {
    var page = frappe.ui.make_app_page({
        parent: wrapper,
        title: 'Multi-Level BOM Details',
        single_column: true
    });

    // Initialize page
    new showbomDetails(page);
};

class showbomDetails {
    constructor(page) {
        this.page = page;
        this.wrapper = $(page.main);
        this.make();
    }

    make() {
        let me = this;

        // Create main layout
        $(frappe.render_template('bom_creator', {})).appendTo(this.wrapper);

        // Initialize controls
        this.init_controls();
    }

    init_controls() {
        let me = this;

        // Create item code field and buttons
        this.item_code_field = this.page.add_field({
            label: 'Item Code',
            fieldtype: 'Link',
            fieldname: 'item_code',
            options: 'Item',
            change: function () {
                me.item_code = this.value;
            }
        });

        // Add BOM field for updates
        this.bom_field = this.page.add_field({
            label: 'BOM No',
            fieldtype: 'Link',
            fieldname: 'bom_no',
            options: 'BOM',
            change: function () {
                me.bom_no = this.value;
                // Auto-fill item code if BOM is selected
                if (this.value) {
                    frappe.db.get_value('BOM', this.value, 'item').then(r => {
                        if (r.message && r.message.item) {
                            me.item_code_field.set_value(r.message.item);
                        }
                    });
                }
            }
        });

        // Add button to fetch BOM details
        this.page.set_primary_action('Fetch BOM Details', function () {
            me.fetch_bom_details();
        }, 'octicon octicon-sync');

        // Add update button
        this.page.add_inner_button('Update BOM', function () {
            me.update_bom();
        });

        // Add refresh button
        this.page.add_menu_item('Refresh', function () {
            me.refresh();
        });

        // Add a setting to control BOM expansion mode
        this.page.add_field({
            label: 'Mode',
            fieldtype: 'Select',
            fieldname: 'expansion_mode',
            options: [
                { label: 'Single Level', value: 'single' },
                { label: 'Multi Level', value: 'multi' }
            ],
            default: 'single',
            change: function () {
                me.expansion_mode = this.value;
            }
        });

        // Set default expansion mode
        me.expansion_mode = 'single';

        // Add a container for results
        this.result_area = $('<div class="bom-result-area">').appendTo(this.wrapper);
    }

    refresh() {
        this.item_code_field.set_value('');
        this.bom_field.set_value('');
        this.result_area.empty();
    }

    fetch_bom_details() {
        let me = this;
        if (!me.item_code && !me.bom_no) {
            frappe.msgprint(__('Please enter an Item Code or BOM No'));
            return;
        }

        // Clear previous results
        me.result_area.empty();

        // Show loading indicator
        me.page.set_indicator(__('Fetching...'), 'blue');

        frappe.call({
            method: 'shree_polymer_custom_app.shree_polymer_custom_app.page.bom_creator.bom_creator.get_bom_details',
            args: {
                item_code: me.item_code,
                bom_no: me.bom_no
            },
            callback: function (r) {
                me.page.set_indicator('');
                if (r.exc) {
                    me.page.set_indicator(__('Error'), 'red');
                    return;
                }
                if (!r.message) {
                    me.result_area.html('<div class="alert alert-warning">No BOM found for this item</div>');
                    return;
                }

                // Store current BOM details for later updates
                me.current_bom_data = r.message;
                me.display_bom_details(r.message);
                me.page.set_indicator(__('BOM Loaded'), 'green');

                // If multi-level mode, automatically expand all BOMs
                if (me.expansion_mode === 'multi') {
                    setTimeout(function () {
                        me.expand_all_boms();
                    }, 500);
                }
            }
        });
    }

    display_bom_details(data) {
        let me = this;

        // Create main BOM info card
        let bom_card = $(`
            <div class="card">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0">BOM: ${data.name} - ${data.item_name}</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <p><strong>Item Code:</strong> ${data.item_code}</p>
                            <p><strong>BOM No:</strong> ${data.name}</p>
                        </div>
                        <div class="col-md-4">
                            <p><strong>Quantity:</strong> ${data.quantity} ${data.uom}</p>
                            <p><strong>Rate:</strong> ${frappe.format(data.rate, { fieldtype: 'Currency' })}</p>
                        </div>
                        <div class="col-md-4">
                            <p><strong>Cost:</strong> ${frappe.format(data.amount, { fieldtype: 'Currency' })}</p>
                            <p><strong>Version:</strong> ${data.version || 1}</p>
                        </div>
                    </div>
                </div>
            </div>
        `).appendTo(me.result_area);

        // Raw material section
        let materials_section = $(`
            <div class="mt-4">
                <h5>Raw Materials</h5>
                <div class="bom-table-container">
                    <table class="table table-bordered table-hover">
                        <thead class="bg-light">
                            <tr>
                                <th style="width: 5%">#</th>
                                <th style="width: 15%">Item Code</th>
                                <th style="width: 20%">Item Name</th>
                                <th style="width: 10%" class="text-right">Quantity</th>
                                <th style="width: 10%">UOM</th>
                                <th style="width: 10%" class="text-right">Rate</th>
                                <th style="width: 15%" class="text-right">Amount</th>
                                <th style="width: 15%">Action</th>
                            </tr>
                        </thead>
                        <tbody id="bom-items"></tbody>
                    </table>
                </div>
            </div>
        `).appendTo(me.result_area);

        let items_table = materials_section.find('#bom-items');

        if (data.items && Array.isArray(data.items) && data.items.length) {
            data.items.forEach((item, idx) => {
                let row = $(`
                    <tr class="main-item" data-item="${item.item_code}" data-item-idx="${idx}">
                        <td>${idx + 1}</td>
                        <td>${item.item_code}</td>
                        <td>${item.item_name}</td>
                        <td class="text-right">
                            <span class="display-value">${item.qty}</span>
                            <input type="number" class="edit-value form-control d-none" value="${item.qty}" step="0.001" min="0">
                        </td>
                        <td>${item.uom}</td>
                        <td class="text-right">${frappe.format(item.rate, { fieldtype: 'Currency' })}</td>
                        <td class="text-right">${frappe.format(item.amount, { fieldtype: 'Currency' })}</td>
                        <td>
                            ${this.get_action_html(item)}
                            <button class="btn btn-xs btn-warning edit-item ml-1" title="Edit quantity">
                                <i class="fa fa-pencil"></i>
                            </button>
                            <button class="btn btn-xs btn-success save-item ml-1 d-none" title="Save quantity">
                                <i class="fa fa-save"></i>
                            </button>
                            <button class="btn btn-xs btn-danger delete-item ml-1" title="Delete item">
                                <i class="fa fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                `).appendTo(items_table);

                if (item.bom_no) {
                    row.attr('data-bom', item.bom_no);
                }
            });

            items_table.on('click', '.btn-expand-bom', function () {
                let btn = $(this);
                let row = btn.closest('tr');
                let bom_no = row.attr('data-bom');
                if (row.hasClass('expanded')) {
                    me.collapse_bom(row);
                } else {
                    me.expand_bom(row, bom_no);
                }
            });

            items_table.on('click', '.edit-item', function () {
                let btn = $(this);
                let row = btn.closest('tr');
                let displayValue = row.find('.display-value');
                let editValue = row.find('.edit-value');
                if (displayValue.hasClass('d-none')) {
                    displayValue.text(editValue.val());
                    displayValue.removeClass('d-none');
                    editValue.addClass('d-none');
                    btn.html('<i class="fa fa-pencil"></i>');
                    row.attr('data-edited', 'true');
                } else {
                    displayValue.addClass('d-none');
                    editValue.removeClass('d-none');
                    btn.html('<i class="fa fa-save"></i>');
                }
            });

            items_table.on('click', '.delete-item', function () {
                let btn = $(this);
                let row = btn.closest('tr');
                row.remove();
            });

            items_table.on('click', '.btn-collapse-direct', function () {
                let btn = $(this);
                let row = btn.closest('tr');
                let target_selector = row.attr('data-target');
                if (target_selector) {
                    $(target_selector).remove();
                    row.remove();
                }
            });

            items_table.on('click', '.btn-collapse', function () {
                let btn = $(this);
                let row = btn.closest('tr');
                let parent_row_id = row.attr('data-parent-row');
                if (parent_row_id) {
                    let parent_row = items_table.find(`tr[data-item-idx="${parent_row_id}"]`);
                    if (parent_row.length) {
                        me.collapse_bom(parent_row);
                    }
                }
            });
        } else {
            items_table.html('<tr><td colspan="8" class="text-center">No raw materials found</td></tr>');
        }

        if (data.operations && data.operations.length) {
            this.display_operations(data.operations);
        }
    }

    update_bom() {
        let me = this;
        if (!me.current_bom_data || !me.current_bom_data.name) {
            frappe.msgprint(__('Please fetch a BOM first'));
            return;
        }

        let updated_items = [];
        $('.main-item[data-edited="true"]').each(function () {
            let row = $(this);
            let item_code = row.attr('data-item');
            let qty = parseFloat(row.find('.display-value').text());
            let idx = parseInt(row.attr('data-item-idx'));

            updated_items.push({
                item_code: item_code,
                qty: qty,
                idx: idx
            });
        });

        if (updated_items.length === 0) {
            frappe.msgprint(__('No changes detected'));
            return;
        }

        frappe.confirm(
            __('Are you sure you want to update the BOM quantities?'),
            function () {
                me.page.set_indicator(__('Updating...'), 'blue');
                frappe.call({
                    method: 'shree_polymer_custom_app.shree_polymer_custom_app.page.bom_creator.bom_creator.update_bom_quantities',
                    args: {
                        bom_no: me.current_bom_data.name,
                        updated_items: updated_items
                    },
                    callback: function (r) {
                        if (r.exc) {
                            me.page.set_indicator(__('Update Failed'), 'red');
                            frappe.msgprint(__('Failed to update BOM: ') + r.exc);
                            return;
                        }
                        me.page.set_indicator(__('BOM Updated'), 'green');
                        frappe.msgprint(__('BOM updated successfully'));
                        me.fetch_bom_details();
                    }
                });
            }
        );
    }

    get_action_html(item) {
        if (item.bom_no) {
            return `
                <button class="btn btn-xs btn-info btn-expand-bom" title="Expand BOM">
                    <i class="fa fa-plus"></i> BOM: ${item.bom_no}
                </button>
            `;
        }
        return '<span class="text-muted">No BOM</span>';
    }

    expand_bom(row, bom_no) {
        let me = this;
        if (!bom_no) return;

        row.addClass('expanded');
        console.log("Expanding BOM - BOM No:", bom_no);
        let btn = row.find('.btn-expand-bom');
        btn.html(`<i class="fa fa-minus"></i> Collapse`);

        let table = row.closest('tbody');
        let item_id = row.data('item').replace(/\./g, '-');
        let item_idx = row.data('item-idx');
        let depth = parseInt(row.attr('data-depth') || 0);
        let new_depth = depth + 1;

        let expansion_id = `exp-${item_id}-${Date.now()}`;
        row.attr('data-expansion-id', expansion_id);

        let loader_row = $(`
            <tr class="bom-child bom-child-of-${expansion_id}" data-depth="${new_depth}" data-parent-expansion="${expansion_id}">
                <td colspan="8" class="text-center py-2">
                    <div class="text-muted">
                        <i class="fa fa-spinner fa-spin"></i> Loading BOM details...
                    </div>
                </td>
            </tr>
        `).insertAfter(row);

        frappe.call({
            method: 'shree_polymer_custom_app.shree_polymer_custom_app.page.bom_creator.bom_creator.get_child_bom_details',
            args: {
                bom_no: bom_no
            },
            callback: function (r) {
                loader_row.remove();
                if (!r.message || !r.message.items || !r.message.items.length) {
                    $(`
                        <tr class="bom-child bom-child-of-${expansion_id}" data-depth="${new_depth}" data-parent-expansion="${expansion_id}">
                            <td colspan="8" class="text-center py-2">
                                <div class="text-muted">No items found in this BOM</div>
                            </td>
                        </tr>
                    `).insertAfter(row);
                    return;
                }

                let header_row = $(`
                    <tr class="bom-child bom-child-of-${expansion_id} bom-child-header" data-depth="${new_depth}" data-parent-expansion="${expansion_id}" data-parent-row="${item_idx}">
                        <td colspan="7" class="font-weight-bold bg-light">
                            <div class="pl-${new_depth * 2}">
                                <i class="fa fa-cubes"></i> BOM: ${r.message.name} - ${r.message.item_name}
                            </div>
                        </td>
                        <td class="text-center">
                            <button class="btn btn-xs btn-danger btn-collapse" data-parent-row="${item_idx}">
                                <i class="fa fa-times"></i> Collapse
                            </button>
                            <button class="btn btn-xs btn-primary add-item ml-1" title="Add Item">
                                <i class="fa fa-plus"></i> Add Item
                            </button>
                        </td>
                    </tr>
                `).insertAfter(row);

                let lastRow = header_row;
                r.message.items.forEach((item, idx) => {
                    let child_id = `${item.item_code}-${idx}`.replace(/\./g, '-');
                    let item_row = $(`
                        <tr class="bom-child bom-child-of-${expansion_id}" data-depth="${new_depth}" 
                            data-item="${item.item_code}" data-child-id="${child_id}" data-parent-expansion="${expansion_id}"
                            ${item.bom_no ? `data-bom="${item.bom_no}"` : ''}>
                            <td class="pl-${new_depth * 2}">${idx + 1}</td>
                            <td class="pl-${new_depth * 2}">${item.item_code}</td>
                            <td>${item.item_name}</td>
                            <td class="text-right">
                                <span class="display-value">${item.qty}</span>
                                <input type="number" class="edit-value form-control d-none" value="${item.qty}" step="0.001" min="0">
                            </td>
                            <td>${item.uom}</td>
                            <td class="text-right">${frappe.format(item.rate, { fieldtype: 'Currency' })}</td>
                            <td class="text-right">${frappe.format(item.amount, { fieldtype: 'Currency' })}</td>
                            <td>
                                ${me.get_action_html(item)}
                                <button class="btn btn-xs btn-warning edit-item ml-1" title="Edit quantity">
                                    <i class="fa fa-pencil"></i>
                                </button>
                                <button class="btn btn-xs btn-success save-item ml-1 d-none" title="Save quantity">
                                    <i class="fa fa-save"></i>
                                </button>
                                <button class="btn btn-xs btn-danger delete-item ml-1" title="Delete item">
                                    <i class="fa fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    `).insertAfter(lastRow);
                    lastRow = item_row;
                });

                $(`
                    <tr class="bom-child bom-child-of-${expansion_id} bom-child-footer" data-depth="${new_depth}" data-parent-expansion="${expansion_id}">
                        <td colspan="6" class="text-right font-weight-bold">
                            Total Cost
                        </td>
                        <td class="text-right font-weight-bold">
                            ${frappe.format(r.message.total_amount, { fieldtype: 'Currency' })}
                        </td>
                        <td></td>
                    </tr>
                `).insertAfter(lastRow);

                me.bind_child_events(expansion_id);
                $('html, body').animate({
                    scrollTop: header_row.offset().top - 100
                }, 500);
            }
        });
    }

    bind_child_events(expansion_id) {
        let me = this;

        console.log(`Binding events for BOM section: ${expansion_id}`);
        
        $(`.bom-child-of-${expansion_id} .btn-collapse`).on('click', function () {
            let parent_idx = $(this).data('parent-row');
            let parent_row = me.result_area.find(`tr[data-item-idx="${parent_idx}"]`);
            me.collapse_bom(parent_row);
        });

        $(`.bom-child-of-${expansion_id} .btn-expand-bom`).on('click', function () {
            let row = $(this).closest('tr');
            let bom_no = row.data('bom');
            if (row.hasClass('expanded')) {
                me.collapse_bom(row);
            } else {
                me.expand_bom(row, bom_no);
            }
        });

        $(`.bom-child-of-${expansion_id} .edit-item`).on('click', function () {
            let row = $(this).closest('tr');
            row.find('.display-value').addClass('d-none');
            row.find('.edit-value').removeClass('d-none');
            $(this).addClass('d-none');
            row.find('.save-item').removeClass('d-none');
        });

        $(`.bom-child-of-${expansion_id} .save-item`).on('click', function () {
            let row = $(this).closest('tr');
            let new_qty = row.find('.edit-value').val();
            let item_code = row.data('item');
            let parent_expansion = row.data('parent-expansion');
            let parent_row = me.result_area.find(`tr[data-expansion-id="${parent_expansion}"]`);
            let parent_bom = parent_row.data('bom') || me.current_bom_data.name;

            frappe.call({
                method: 'shree_polymer_custom_app.shree_polymer_custom_app.page.bom_creator.bom_creator.update_bom_item_qty',
                args: {
                    bom_no: parent_bom,
                    item_code: item_code,
                    qty: new_qty
                },
                callback: function (r) {
                    if (r.exc) {
                        frappe.msgprint(__('Failed to update quantity: ') + r.exc);
                        return;
                    }
                    row.find('.display-value').text(new_qty).removeClass('d-none');
                    row.find('.edit-value').addClass('d-none');
                    row.find('.save-item').addClass('d-none');
                    row.find('.edit-item').removeClass('d-none');

                    let rate = parseFloat(row.find('td:eq(5)').text().replace(/[^0-9.-]+/g, ''));
                    let new_amount = rate * new_qty;
                    row.find('td:eq(6)').text(frappe.format(new_amount, { fieldtype: 'Currency' }));

                    frappe.show_alert({
                        message: __('Quantity updated successfully'),
                        indicator: 'green'
                    }, 3);

                    if (me.expansion_mode === 'multi') {
                        setTimeout(function () {
                            me.fetch_bom_details();
                        }, 1000);
                    }
                }
            });
        });

        $(`.bom-child-of-${expansion_id} .delete-item`).on('click', function () {
            let row = $(this).closest('tr');
            let item_code = row.data('item');
            let parent_expansion = row.data('parent-expansion');
            let parent_row = me.result_area.find(`tr[data-expansion-id="${parent_expansion}"]`);
            let parent_bom = parent_row.data('bom') || me.current_bom_data.name;

            frappe.confirm(
                __('Are you sure you want to delete this item from the BOM?'),
                function () {
                    frappe.call({
                        method: 'shree_polymer_custom_app.shree_polymer_custom_app.page.bom_creator.bom_creator.delete_bom_item',
                        args: {
                            bom_no: parent_bom,
                            item_code: item_code
                        },
                        callback: function (r) {
                            if (r.exc) {
                                frappe.msgprint(__('Failed to delete item: ') + r.exc);
                                return;
                            }
                            frappe.show_alert({
                                message: __('Item deleted successfully'),
                                indicator: 'green'
                            }, 3);
                            me.fetch_bom_details();
                        }
                    });
                }
            );
        });

        // Add item button handler for sub-level BOMs
        console.log(`Adding handler to Add Item button for BOM section: ${expansion_id}`);
        $(`.bom-child-of-${expansion_id} .add-item`).on('click', function () {
            console.log("Add Item button clicked");
            let newRow = $(`
                <tr class="bom-child item" data-item="" data-item-idx="${expansion_id}-${$(`.bom-child[data-parent-expansion="${expansion_id}"]`).length}">
                    <td>${$(`.bom-child[data-parent-expansion="${expansion_id}"]`).length + 1}</td>
                    <td>
                        <select class="form-control item-code-select">
                            <option>Select Item</option>
                            <!-- Options will be populated from the backend -->
                        </select>
                    </td>
                    <td><input type="text" class="form-control item-name-input"></td>
                    <td class="text-right"><input type="number" class="form-control item-qty-input" value="1" step="0.001" min="0"></td>
                    <td><input type="text" class="form-control item-uom-input"></td>
                    <td class="text-right"><input type="number" class="form-control item-rate-input" value="0" step="0.001" min="0"></td>
                    <td class="text-right item-amount">0</td>
                    <td>
                        <button class="btn btn-xs btn-success save-new-item" title="Save item">
                            <i class="fa fa-save"></i>
                        </button>
                        <button class="btn btn-xs btn-danger delete-row" title="Delete row">
                            <i class="fa fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).insertAfter($(this).closest('tr').nextAll('.bom-child-footer').first().prev('.bom-child'));

            frappe.call({
                method: 'frappe.client.get_list',
                args: {
                    doctype: 'Item',
                    fields: ['name']
                },
                callback: function (r) {
                    if (r.message) {
                        let select = newRow.find('.item-code-select');
                        r.message.forEach(function (item) {
                            select.append(`<option value="${item.name}">${item.name}</option>`);
                        });

                        // Update Item Name and UOM when item is selected
                        select.change(function () {
                            let selectedItem = $(this).val();
                            frappe.db.get_value('Item', selectedItem, ['item_name', 'stock_uom'])
                                .then(r => {
                                    if (r.message) {
                                        newRow.find('.item-name-input').val(r.message.item_name);
                                        newRow.find('.item-uom-input').val(r.message.stock_uom);
                                    }
                                });
                        });
                    }
                }
            });

            // Attach event to Save button in the new row
            newRow.on('click', '.save-new-item', function () {
                let row = $(this).closest('tr');
                let item_code = row.find('.item-code-select').val();
                let item_name = row.find('.item-name-input').val();
                let qty = parseFloat(row.find('.item-qty-input').val());
                let uom = row.find('.item-uom-input').val();
                let rate = parseFloat(row.find('.item-rate-input').val());
                let amount = rate * qty;

                let parent_expansion = row.data('parent-expansion');
                let parent_row = me.result_area.find(`tr[data-expansion-id="${parent_expansion}"]`);
                let parent_bom = parent_row.data('bom') || me.current_bom_data.name;

                if (!item_code || !qty || !uom || isNaN(rate)) {
                    frappe.msgprint(__('Please fill in all fields correctly'));
                    return;
                }

                console.log("Saving new item:", {
                    bom_no: parent_bom,
                    item_code: item_code,
                    qty: qty,
                    uom: uom,
                    rate: rate
                });

                frappe.call({
                    method: 'shree_polymer_custom_app.shree_polymer_custom_app.page.bom_creator.bom_creator.add_bom_item',
                    args: {
                        bom_no: parent_bom,
                        item_code: item_code,
                        qty: qty,
                        uom: uom,
                        rate: rate
                    },
                    callback: function (r) {
                        if (r.exc) {
                            frappe.msgprint(__('Failed to add item: ') + r.exc);
                            return;
                        }
                        frappe.show_alert({
                            message: __('Item added successfully'),
                            indicator: 'green'
                        }, 3);
                        row.find('.item-amount').text(`${amount.toFixed(2)}`);
                        row.attr('data-item', item_code);
                        row.find('.save-new-item').remove();
                        me.fetch_bom_details();
                    }
                });
            });
        });

        // Delete newly added row
        $(`.bom-child-of-${expansion_id}`).on('click', '.delete-row', function () {
            $(this).closest('tr').remove();
        });
    }

    expand_all_boms() {
        let me = this;
        let expand_buttons = me.result_area.find('.btn-expand-bom');

        let process_next = function (index) {
            if (index >= expand_buttons.length) return;
            let btn = expand_buttons.eq(index);
            let row = btn.closest('tr');
            if (!row.hasClass('expanded')) {
                let bom_no = row.data('bom');
                if (bom_no) {
                    me.expand_bom(row, bom_no);
                    setTimeout(function () {
                        process_next(index + 1);
                    }, 500);
                    return;
                }
            }
            process_next(index + 1);
        };

        process_next(0);
    }

    collapse_bom(row) {
        let expansion_id = row.attr('data-expansion-id');
        if (!expansion_id) {
            console.warn("Cannot collapse: no expansion ID found");
            return;
        }

        let child_rows = row.closest('tbody').find(`[data-parent-expansion="${expansion_id}"]`);
        let expanded_children = child_rows.filter('.expanded');
        expanded_children.each((i, el) => {
            this.collapse_bom($(el));
        });
        child_rows.remove();

        row.removeClass('expanded');
        row.removeAttr('data-expansion-id');

        let btn = row.find('.btn-expand-bom');
        let bom_no = row.attr('data-bom');
        btn.html(`<i class="fa fa-plus"></i> BOM: ${bom_no}`);
    }

    display_operations(operations) {
        let me = this;

        let operations_section = $(`
            <div class="mt-4">
                <h5>Operations</h5>
                <table class="table table-bordered table-hover">
                    <thead class="bg-light">
                        <tr>
                            <th>Operation</th>
                            <th>Workstation</th>
                            <th class="text-right">Time (mins)</th>
                            <th class="text-right">Cost</th>
                        </tr>
                    </thead>
                    <tbody id="bom-operations"></tbody>
                </table>
            </div>
        `).appendTo(me.result_area);

        let operations_table = operations_section.find('#bom-operations');

        operations.forEach(op => {
            $(`
                <tr>
                    <td>${op.operation}</td>
                    <td>${op.workstation || 'N/A'}</td>
                    <td class="text-right">${op.time_in_mins}</td>
                    <td class="text-right">${frappe.format(op.operating_cost, { fieldtype: 'Currency' })}</td>
                </tr>
            `).appendTo(operations_table);
        });
    }
}
